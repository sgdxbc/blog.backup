---
title: 如果我能分身该多好
date: 2020-01-27 11:41
categories: dreams
tag: 杂谈
excerpt_separator: <!-- more -->
---

终于还是忍不住写一篇毫无技术含量的心情日记了。

由于内外环境的共同影响，对代码项目的创作欲望又陷入了低迷的几日。为了尽快找回状态，突发奇想把封存于云端多日的《Real Time Rendering》拉下来督促自己学习。这一学便一发不可收拾。由于过多的宏图伟业在脑海中挥之不去，不得不把它们稳妥地记录下来，送佛送到西，不要再烦我了。

<!-- more -->

第一个要写的事甚至有点出乎我自己的意料：我不想写代码了。我想认认真真地开始筹划已久的作曲生涯。

既然是筹划已久那么显然这个念头不会是第一次动了。这回受到了什么刺激呢？因为我偶然在B站上看了李特基的娱乐向视频，然后发现了Cakewalk——免费但足够用的编曲软件。能够被如此简单朴素的事实点燃的念头，从一个侧面可以看出我对此有多渴望。当然，也许只是对编程工作的累积厌恶的一种体现而已。

我想要写的曲子介于交响乐和流行歌之间。我肯定不会写流行歌的旋律，因为我看不上那样「朗朗上口」的作曲。交响乐又不是人人都能写的。考虑到我也没有作词和调教虚拟歌姬的能力和兴趣，最终的成品应该比较接近于电影配乐，当然路子如果能更野一点是最好的。归根结底，我想做的东西似乎第一必须标新立异，第二最好难以归类，至于内容本身反而不如标签重要了。

作为最近也是最令我感到有趣的一个灵感，一首4分钟左右的曲子，生动形象地刻画一场大学生身体素质测试1000米跑的现场，它一直在我脑海中盘旋，只是想要把它写出来的确不是那么容易。当然了，我对这个状况再熟悉不过了——我的理性敏锐地发觉自己正在对于非常「不务正业」的幻想表示向往，从而存在着极其不负责任地拖延已经接下的正经工作的风险，可怎么办呢？那便是自我怂恿「一定要做的极端一点哦」，然后让这个幻想从一开始就极端地无法开始，从而只能没事想想而无法真的花费我的精力去实现它。干得漂亮。这样的自己简直没有理由不一事无成呢。

于是呢，其它出现过的灵感，诸如对《I beg you》和紫罗兰永恒花园中出现的一系列旋律进行改编这类的，就都被上面的那个灵感给「艳压」了。当然这些想做好也不容易就是了。

为什么要说这样的自己会一事无成呢？因为我仅仅条件反射地给不务正业的项目设置了门槛，却也没有继续去「务正业」的动力啊。这便是这一周目的所谓「对代码项目的创作欲望又陷入了低迷的几日」的真相了。

接下来要出场的就是《Real Time Rendering》了。这是一本图形学领域的入门教材，最早出现在「2019必看完之书单」上——然而新年的钟声早已敲响。不过这根本不算什么，毕竟我在云端封存的唯二的另一本书《Physical Based Rendering》从「2016比看完之书单」就已经出现了。我曾经不止一次的想，这本2016年刚刚修订就被我认识的书，如果当时我对它更加上心一点，我是不是有可能成为第一个通读它的新版的读者？然而这份殊荣被我无比轻易地错过了。

我为什么会想起这两本书呢，因为昨晚刷知乎时看到了叶大对于「人工智能如何转图形学」的一篇短答（顺便吐槽一句题主这是何必呢），最后一句话恰好就是

> 只要把RTR和PBR看完基本上就上手了。

精确制导，真有你的啊叶大。被不明AOE深深嘲讽的我就这样又一次打开了RTR。

也许每一个程序员兼Minecraft玩家都有过「重写Minecraft」的念头。这个游戏的代码几乎每一处都是槽点，实在配不上它本身的理念和带给玩家的感动。当我打开一本面向游戏领域的图形学书籍看起来的时候，这个念头就被自然而然地勾了起来。

MC的一大性能问题来自于其**单线程模型**。按照[Spigot论坛上的讨论][1]，所有的游戏逻辑全部都是单线程工作的，只有世界生成和光照计算（被认为）是可以并发工作的。然而，事实上以区块为单位进行并行任务的划分是非常简单可行的。作为一个在我脑海中存活了两年以上的简陋模型，一个主线程作为整个系统的接待娘，一方面对外与客户端进行通信，另一方面与数目可变的工作线程打交道，两边应该都可以用类似于TCP的长连接协议。接待娘维护着一个需要更新的区块列表，在收到工作线程的「当前工作完成」信息时返回任何一个「还没有进行当前游戏刻逻辑更新」的区块索引，工作线程收到索引后自主去共用数据库/文件系统中读取相应区块的数据，并完成相应的更新逻辑。当所有需要更新的区块都完成了当前游戏刻的更新逻辑后，这一游戏刻的状态就可以暴露给客户端，接待娘接下来等待下一游戏刻的到来，然后再次分发任务。

考虑一个比较典型的案例。在某个区块的边缘有一株南瓜藤，它在当前游戏刻生长至最终阶段。那么，负责这一区块接下来游戏刻更新的线程就需要同时读取这一区块和临近区块的数据，从而确定长出的南瓜所有的可能位置。如果决定在下一游戏刻长出南瓜，那么就要将这个方块替换事件注册到区块的下一游戏刻代办列表中。如果真的长到了相邻的区块里，就注册在相邻区块的待办列表中。代办列表会在每个游戏刻被检查并执行相应的更新。

这个模型也许还不能应对所有的游戏逻辑，但是至少说明了比单线程更高程度的并行是有可能达到的。只要解决好数据存储的时间复杂度问题（因为这个模型要求上一游戏刻内的所有更新在下一游戏刻对所有工作线程可见），其应当具有一定的可行性。

[1]: https://www.spigotmc.org/threads/to-what-extent-is-minecraft-multi-threaded.376015/

注意到上面我在整个描述中都假设了各线程之间的数据独立性，因此其实是一个多进程模型。采用多线程共享内存是不是可以简化设计呢？这就涉及到一个外部因素：多线程模型需要一个「真并行」多线程运行时支持，这排除了Python、JS等一系列流行的脚本语言。由于我个人对Java和Go的偏见，似乎能选择的就只剩下C++和Rust了。为了将Rust改造成适合Minecraft开发的抽象层次（没有垃圾收集的语言对于插件开发者实在有点不友好），我启动了Shattuck项目，并且在纯画大饼的状态下骗了50多个star，实在是有点过意不去。事实上，想要编写一个G1级别的垃圾收集器是非常有难度的，因此这条路线比预想中要坎坷得多，因此在编写并发MC的时候最好还是以比较弱的多进程模型进行假设。但是这么多的星星摆在这里，我也绝对不能就此弃坑。大概吧。

文章的最后，我来盘点一下文章中出现的三条大路线：
* 作曲线，写一个旋律作品，投稿B站成为爆款。是的我就是看多了无脑短视频眼红了。
* 读书线，把两本图形学大部头扼杀在「2020必读完之书单」中，从而真正地确定自己是不是要朝这个方向发展。
* MC革命线，从头实现一个多进程模型下的MC服务器端，定个小目标，至少能在N核服务器上支撑2N个人同时跑图吧。
    * 多线程子路线，把Shattuck写完然后用它来写新的MC。

这就完事了？别忘了还有一条隐藏路线科研线。这条线我就不多说了，看看weaver分类下的十几篇文章就行了。

我几乎可以肯定的说，这四条线中的任何一条，都可以吃满我2020年一年份的全部精力。更不用提我还有一些类似于「考驾照」「练完《第一叙事曲》」之类的副本要打。

但是我又无比希望我可以把四条线都做好。科研线自不必说，这是导师对我寄予厚望的体验；作曲是我多年来的隐藏梦想，在我每一次轻易听出一首歌的和弦和调式时都在轻轻扎着我的心；MC和作曲一样都会让我成为——不说万众瞩目，至少——百众瞩目的存在，而我对MC还有一点私心，希望它做好了可以顶替科研作为毕业设计的课题。最后，只有读完了两本书，我才能知道自己接下来的学业到底向哪里前进，是继续研究网络，还是真的去实现图形学的梦想。

可惜，我不能分身，我的生活也不是galgame。

写下这么大篇幅的日志，只希望在未来的每一时刻，我能有机会回顾一下，在2020年开年时对我最重要的几个梦想中，哪些真的照进了现实，对于这些幸运儿我到底又最在意哪一个。